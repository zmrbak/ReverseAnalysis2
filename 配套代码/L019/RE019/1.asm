; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29915.0 

	TITLE	C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG33910 DB	'%d:', 09H, '%lld', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?fib@@YA_K_K@Z					; fib
PUBLIC	?fib2@@YA_K_K@Z					; fib2
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$1 = -12						; size = 8
_i$2 = -4						; size = 4
_main	PROC
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 44
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$2[ebp], 50			; 00000032H
	ja	SHORT $LN1@main
; Line 46
	mov	ecx, DWORD PTR _i$2[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	call	?fib2@@YA_K_K@Z				; fib2
	add	esp, 8
	mov	DWORD PTR _a$1[ebp], eax
	mov	DWORD PTR _a$1[ebp+4], edx
; Line 47
	mov	eax, DWORD PTR _a$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _a$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	push	OFFSET $SG33910
	call	_printf
	add	esp, 16					; 00000010H
; Line 48
	jmp	SHORT $LN2@main
$LN1@main:
; Line 49
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = -36						; size = 8
_a1$ = -28						; size = 8
_a3$ = -20						; size = 8
_a2$ = -12						; size = 8
_i$1 = -4						; size = 4
_a$ = 8							; size = 8
?fib2@@YA_K_K@Z PROC					; fib2
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 22
	cmp	DWORD PTR _a$[ebp+4], 0
	ja	SHORT $LN5@fib2
	jb	SHORT $LN7@fib2
	cmp	DWORD PTR _a$[ebp], 2
	jae	SHORT $LN5@fib2
$LN7@fib2:
; Line 24
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp+4]
	jmp	SHORT $LN1@fib2
$LN5@fib2:
; Line 29
	xorps	xmm0, xmm0
	movlpd	QWORD PTR _a1$[ebp], xmm0
; Line 30
	xor	eax, eax
	mov	DWORD PTR _a2$[ebp], 1
	mov	DWORD PTR _a2$[ebp+4], eax
; Line 33
	mov	DWORD PTR _i$1[ebp], 2
	jmp	SHORT $LN4@fib2
$LN2@fib2:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@fib2:
	mov	edx, DWORD PTR _i$1[ebp]
	xor	eax, eax
	mov	DWORD PTR tv80[ebp], edx
	mov	DWORD PTR tv80[ebp+4], eax
	mov	ecx, DWORD PTR tv80[ebp+4]
	cmp	ecx, DWORD PTR _a$[ebp+4]
	ja	SHORT $LN3@fib2
	jb	SHORT $LN8@fib2
	mov	edx, DWORD PTR tv80[ebp]
	cmp	edx, DWORD PTR _a$[ebp]
	ja	SHORT $LN3@fib2
$LN8@fib2:
; Line 35
	mov	eax, DWORD PTR _a1$[ebp]
	add	eax, DWORD PTR _a2$[ebp]
	mov	ecx, DWORD PTR _a1$[ebp+4]
	adc	ecx, DWORD PTR _a2$[ebp+4]
	mov	DWORD PTR _a3$[ebp], eax
	mov	DWORD PTR _a3$[ebp+4], ecx
; Line 36
	mov	edx, DWORD PTR _a2$[ebp]
	mov	eax, DWORD PTR _a2$[ebp+4]
	mov	DWORD PTR _a1$[ebp], edx
	mov	DWORD PTR _a1$[ebp+4], eax
; Line 37
	mov	ecx, DWORD PTR _a3$[ebp]
	mov	edx, DWORD PTR _a3$[ebp+4]
	mov	DWORD PTR _a2$[ebp], ecx
	mov	DWORD PTR _a2$[ebp+4], edx
; Line 38
	jmp	SHORT $LN2@fib2
$LN3@fib2:
; Line 39
	mov	eax, DWORD PTR _a3$[ebp]
	mov	edx, DWORD PTR _a3$[ebp+4]
$LN1@fib2:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
?fib2@@YA_K_K@Z ENDP					; fib2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 8
?fib@@YA_K_K@Z PROC					; fib
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 9
	cmp	DWORD PTR _a$[ebp+4], 0
	ja	SHORT $LN2@fib
	jb	SHORT $LN4@fib
	cmp	DWORD PTR _a$[ebp], 2
	jae	SHORT $LN2@fib
$LN4@fib:
; Line 11
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp+4]
	jmp	SHORT $LN1@fib
$LN2@fib:
; Line 15
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, 2
	mov	ecx, DWORD PTR _a$[ebp+4]
	sbb	ecx, 0
	push	ecx
	push	eax
	call	?fib@@YA_K_K@Z				; fib
	add	esp, 8
	mov	esi, eax
	mov	edi, edx
	mov	edx, DWORD PTR _a$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _a$[ebp+4]
	sbb	eax, 0
	push	eax
	push	edx
	call	?fib@@YA_K_K@Z				; fib
	add	esp, 8
	add	esi, eax
	adc	edi, edx
	mov	eax, esi
	mov	edx, edi
$LN1@fib:
; Line 16
	pop	edi
	pop	esi
	pop	ebp
	ret	0
?fib@@YA_K_K@Z ENDP					; fib
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 959
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 960
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 961
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 962
	mov	eax, DWORD PTR __Result$[ebp]
; Line 963
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
