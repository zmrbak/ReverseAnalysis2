; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29915.0 

	TITLE	C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG33910 DB	'%d:', 09H, '%lld', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?fib@@YA_K_K@Z					; fib
PUBLIC	?fib2@@YA_K_K@Z					; fib2
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_a1$1$ = -16						; size = 4
_a1$2$ = -12						; size = 4
tv95 = -8						; size = 4
_a1$1 = -8						; size = 8
_main	PROC
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 43
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 44
	xor	esi, esi
	npad	7
$LL4@main:
; Line 46
	xor	ecx, ecx
; Line 22
	cmp	esi, 2
	jae	SHORT $LN10@main
; Line 24
	mov	edx, esi
	jmp	SHORT $LN6@main
$LN10@main:
	xorps	xmm0, xmm0
; Line 30
	mov	ebx, 1
	movlpd	QWORD PTR _a1$1[esp+32], xmm0
	xor	ebp, ebp
	mov	edx, DWORD PTR _a1$1[esp+36]
	mov	edi, DWORD PTR _a1$1[esp+32]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _a1$2$[esp+32], edx
; Line 33
	jmp	SHORT $LN9@main
$LN23@main:
	mov	edi, DWORD PTR _a1$1$[esp+32]
$LN9@main:
; Line 35
	mov	edx, ebx
; Line 36
	mov	DWORD PTR _a1$1$[esp+32], ebx
	add	edx, edi
	mov	edi, ebp
; Line 37
	mov	ebx, edx
	adc	edi, DWORD PTR _a1$2$[esp+32]
	inc	eax
	mov	DWORD PTR _a1$2$[esp+32], ebp
	mov	ebp, edi
	cmp	eax, esi
	jbe	SHORT $LN23@main
; Line 39
	mov	ecx, edi
$LN6@main:
; Line 47
	push	ecx
	push	edx
	push	esi
	push	OFFSET $SG33910
	call	_printf
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, 50					; 00000032H
	jbe	SHORT $LL4@main
; Line 49
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_a1$2$ = -8						; size = 4
tv88 = -4						; size = 4
_a1$1$ = 8						; size = 4
_a1$ = 8						; size = 8
_a$ = 8							; size = 8
?fib2@@YA_K_K@Z PROC					; fib2
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 22
	mov	edx, DWORD PTR _a$[esp]
	sub	esp, 8
	mov	eax, DWORD PTR _a$[esp+4]
	test	edx, edx
	ja	SHORT $LN5@fib2
	jb	SHORT $LN1@fib2
	cmp	eax, 2
	jb	SHORT $LN1@fib2
$LN5@fib2:
	push	ebx
	push	ebp
	xorps	xmm0, xmm0
; Line 30
	mov	ebx, 1
	push	esi
	movlpd	QWORD PTR _a1$[esp+16], xmm0
	xor	ebp, ebp
	mov	esi, DWORD PTR _a1$[esp+20]
	push	edi
	lea	ecx, DWORD PTR [ebx+1]
	mov	DWORD PTR _a1$2$[esp+24], esi
$LN14@fib2:
; Line 35
	mov	edi, DWORD PTR _a1$1$[esp+20]
	mov	esi, ebx
	add	esi, edi
	mov	DWORD PTR tv88[esp+24], 0
	mov	edi, ebp
; Line 36
	mov	DWORD PTR _a1$1$[esp+20], ebx
	adc	edi, DWORD PTR _a1$2$[esp+24]
; Line 37
	mov	ebx, esi
	inc	ecx
	mov	DWORD PTR _a1$2$[esp+24], ebp
	mov	ebp, edi
	cmp	DWORD PTR tv88[esp+24], edx
	jb	SHORT $LN14@fib2
; Line 33
	ja	SHORT $LN12@fib2
	cmp	ecx, eax
	jbe	SHORT $LN14@fib2
$LN12@fib2:
; Line 39
	mov	edx, edi
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$LN1@fib2:
; Line 40
	add	esp, 8
	ret	0
?fib2@@YA_K_K@Z ENDP					; fib2
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_a$ = 8							; size = 8
?fib@@YA_K_K@Z PROC					; fib
; File C:\Users\Zmrbak\source\repos\RE019\RE019\RE019.cpp
; Line 6
	push	ebx
; Line 9
	mov	ebx, DWORD PTR _a$[esp]
	push	ebp
	mov	ebp, DWORD PTR _a$[esp+8]
	test	ebp, ebp
	ja	SHORT $LN2@fib
	jb	SHORT $LN4@fib
	cmp	ebx, 2
	jae	SHORT $LN2@fib
$LN4@fib:
; Line 11
	mov	edx, ebp
	mov	eax, ebx
	pop	ebp
; Line 16
	pop	ebx
	ret	0
$LN2@fib:
; Line 15
	mov	ecx, ebx
	mov	eax, ebp
	add	ecx, -2					; fffffffeH
	push	esi
	push	edi
	adc	eax, -1
	push	eax
	push	ecx
	call	?fib@@YA_K_K@Z				; fib
	add	ebx, -1
	mov	esi, eax
	mov	edi, edx
	adc	ebp, -1
	push	ebp
	push	ebx
	call	?fib@@YA_K_K@Z				; fib
	add	esp, 16					; 00000010H
	add	eax, esi
	adc	edx, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 16
	pop	ebx
	ret	0
?fib@@YA_K_K@Z ENDP					; fib
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	esi
; Line 960
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	___acrt_iob_func
	add	esp, 4
; Line 645
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 962
	pop	esi
; Line 963
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 645
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
