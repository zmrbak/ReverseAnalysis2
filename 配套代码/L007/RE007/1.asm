; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29915.0 

	TITLE	C:\Users\Zmrbak\source\repos\RE007\RE007\RE007.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG58275 DB	'Hello World!', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?f_add@@YAHIPAH00@Z				; f_add
PUBLIC	?f_simd@@YAHIPAH00@Z				; f_simd
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a4$ = -260						; size = 64
_a3$ = -196						; size = 64
_a1$ = -132						; size = 64
_a2$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_main	PROC
; File C:\Users\Zmrbak\source\repos\RE007\RE007\RE007.cpp
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 50
	push	OFFSET $SG58275
	call	_printf
	add	esp, 4
; Line 52
	mov	DWORD PTR _a1$[ebp], 1
	mov	DWORD PTR _a1$[ebp+4], 2
	mov	DWORD PTR _a1$[ebp+8], 3
	mov	DWORD PTR _a1$[ebp+12], 4
	mov	DWORD PTR _a1$[ebp+16], 5
	mov	DWORD PTR _a1$[ebp+20], 6
	mov	DWORD PTR _a1$[ebp+24], 7
	mov	DWORD PTR _a1$[ebp+28], 8
	mov	DWORD PTR _a1$[ebp+32], 9
	mov	DWORD PTR _a1$[ebp+36], 10		; 0000000aH
	mov	DWORD PTR _a1$[ebp+40], 11		; 0000000bH
	mov	DWORD PTR _a1$[ebp+44], 12		; 0000000cH
	mov	DWORD PTR _a1$[ebp+48], 13		; 0000000dH
	mov	DWORD PTR _a1$[ebp+52], 14		; 0000000eH
	mov	DWORD PTR _a1$[ebp+56], 15		; 0000000fH
	mov	DWORD PTR _a1$[ebp+60], 1
; Line 53
	mov	DWORD PTR _a2$[ebp], 1
	mov	DWORD PTR _a2$[ebp+4], 2
	mov	DWORD PTR _a2$[ebp+8], 3
	mov	DWORD PTR _a2$[ebp+12], 4
	mov	DWORD PTR _a2$[ebp+16], 5
	mov	DWORD PTR _a2$[ebp+20], 6
	mov	DWORD PTR _a2$[ebp+24], 7
	mov	DWORD PTR _a2$[ebp+28], 8
	mov	DWORD PTR _a2$[ebp+32], 9
	mov	DWORD PTR _a2$[ebp+36], 10		; 0000000aH
	mov	DWORD PTR _a2$[ebp+40], 11		; 0000000bH
	mov	DWORD PTR _a2$[ebp+44], 12		; 0000000cH
	mov	DWORD PTR _a2$[ebp+48], 13		; 0000000dH
	mov	DWORD PTR _a2$[ebp+52], 14		; 0000000eH
	mov	DWORD PTR _a2$[ebp+56], 15		; 0000000fH
	mov	DWORD PTR _a2$[ebp+60], 2
; Line 56
	lea	eax, DWORD PTR _a3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a1$[ebp]
	push	edx
	push	16					; 00000010H
	call	?f_add@@YAHIPAH00@Z			; f_add
	add	esp, 16					; 00000010H
; Line 57
	lea	eax, DWORD PTR _a4$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a1$[ebp]
	push	edx
	push	16					; 00000010H
	call	?f_simd@@YAHIPAH00@Z			; f_simd
	add	esp, 16					; 00000010H
; Line 58
	xor	eax, eax
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_m3$1 = -128						; size = 16
$T2 = -112						; size = 16
_m2$3 = -96						; size = 16
_m1$4 = -80						; size = 16
$T5 = -64						; size = 16
$T6 = -48						; size = 16
_reminder$ = -28					; size = 4
_nLoop$ = -24						; size = 4
_pa3$ = -20						; size = 4
_pa2$ = -16						; size = 4
_pa1$ = -12						; size = 4
_i$7 = -8						; size = 4
_i$8 = -4						; size = 4
_sz$ = 8						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
_a3$ = 20						; size = 4
?f_simd@@YAHIPAH00@Z PROC				; f_simd
; File C:\Users\Zmrbak\source\repos\RE007\RE007\RE007.cpp
; Line 17
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
; Line 18
	mov	eax, DWORD PTR _sz$[ebx]
	shr	eax, 2
	mov	DWORD PTR _nLoop$[ebp], eax
; Line 19
	mov	eax, DWORD PTR _sz$[ebx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	DWORD PTR _reminder$[ebp], edx
; Line 21
	mov	edx, DWORD PTR _a1$[ebx]
	mov	DWORD PTR _pa1$[ebp], edx
; Line 22
	mov	eax, DWORD PTR _a2$[ebx]
	mov	DWORD PTR _pa2$[ebp], eax
; Line 23
	mov	ecx, DWORD PTR _a3$[ebx]
	mov	DWORD PTR _pa3$[ebp], ecx
; Line 25
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@f_simd
$LN2@f_simd:
	mov	edx, DWORD PTR _i$7[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7[ebp], edx
$LN4@f_simd:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _nLoop$[ebp]
	jae	SHORT $LN3@f_simd
; Line 27
	mov	ecx, DWORD PTR _pa1$[ebp]
	lddqu	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _m1$4[ebp], xmm0
; Line 28
	mov	edx, DWORD PTR _pa2$[ebp]
	lddqu	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _m2$3[ebp], xmm0
; Line 29
	movaps	xmm0, XMMWORD PTR _m1$4[ebp]
	paddd	xmm0, XMMWORD PTR _m2$3[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _m3$1[ebp], xmm0
; Line 30
	mov	eax, DWORD PTR _pa3$[ebp]
	movups	xmm0, XMMWORD PTR _m3$1[ebp]
	movups	XMMWORD PTR [eax], xmm0
; Line 32
	mov	ecx, DWORD PTR _pa1$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _pa1$[ebp], ecx
; Line 33
	mov	edx, DWORD PTR _pa2$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _pa2$[ebp], edx
; Line 34
	mov	eax, DWORD PTR _pa3$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pa3$[ebp], eax
; Line 35
	jmp	SHORT $LN2@f_simd
$LN3@f_simd:
; Line 37
	mov	ecx, DWORD PTR _sz$[ebx]
	sub	ecx, DWORD PTR _reminder$[ebp]
	mov	DWORD PTR _i$8[ebp], ecx
	jmp	SHORT $LN7@f_simd
$LN5@f_simd:
	mov	edx, DWORD PTR _i$8[ebp]
	add	edx, 1
	mov	DWORD PTR _i$8[ebp], edx
$LN7@f_simd:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _sz$[ebx]
	jae	SHORT $LN6@f_simd
; Line 39
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _a1$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _a2$[ebx]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _a3$[ebx]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 40
	jmp	SHORT $LN5@f_simd
$LN6@f_simd:
; Line 43
	xor	eax, eax
; Line 44
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?f_simd@@YAHIPAH00@Z ENDP				; f_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_sz$ = 8						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
_a3$ = 20						; size = 4
?f_add@@YAHIPAH00@Z PROC				; f_add
; File C:\Users\Zmrbak\source\repos\RE007\RE007\RE007.cpp
; Line 8
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 9
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@f_add
$LN2@f_add:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@f_add:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _sz$[ebp]
	jae	SHORT $LN3@f_add
; Line 11
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _a2$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _a3$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 12
	jmp	SHORT $LN2@f_add
$LN3@f_add:
; Line 13
	xor	eax, eax
; Line 14
	mov	esp, ebp
	pop	ebp
	ret	0
?f_add@@YAHIPAH00@Z ENDP				; f_add
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 959
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 960
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 961
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 962
	mov	eax, DWORD PTR __Result$[ebp]
; Line 963
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
