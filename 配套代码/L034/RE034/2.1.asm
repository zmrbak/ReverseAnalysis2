; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30037.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG33167 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
	ORG $+4
$SG33168 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?f@@YAXPEAH00000_K@Z				; f
PUBLIC	?f_restrict@@YAXPEIAH00000_K@Z			; f_restrict
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__xmm@00000040000000300000002000000010
PUBLIC	__xmm@00000080000000700000006000000050
PUBLIC	__xmm@00000120000001100000010000000090
PUBLIC	__xmm@00000160000001500000014000000130
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$?f@@YAXPEAH00000_K@Z DD imagerel $LN11
	DD	imagerel $LN11+17
	DD	imagerel $unwind$?f@@YAXPEAH00000_K@Z
$pdata$1$?f@@YAXPEAH00000_K@Z DD imagerel $LN11+17
	DD	imagerel $LN11+127
	DD	imagerel $chain$1$?f@@YAXPEAH00000_K@Z
$pdata$2$?f@@YAXPEAH00000_K@Z DD imagerel $LN11+127
	DD	imagerel $LN11+132
	DD	imagerel $chain$2$?f@@YAXPEAH00000_K@Z
$pdata$?f_restrict@@YAXPEIAH00000_K@Z DD imagerel $LN11
	DD	imagerel $LN11+25
	DD	imagerel $unwind$?f_restrict@@YAXPEIAH00000_K@Z
$pdata$1$?f_restrict@@YAXPEIAH00000_K@Z DD imagerel $LN11+25
	DD	imagerel $LN11+126
	DD	imagerel $chain$1$?f_restrict@@YAXPEIAH00000_K@Z
$pdata$2$?f_restrict@@YAXPEIAH00000_K@Z DD imagerel $LN11+126
	DD	imagerel $LN11+133
	DD	imagerel $chain$2$?f_restrict@@YAXPEIAH00000_K@Z
$pdata$main DD	imagerel $LN37
	DD	imagerel $LN37+504
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@00000160000001500000014000000130
CONST	SEGMENT
__xmm@00000160000001500000014000000130 DB '0', 01H, 00H, 00H, '@', 01H, 00H
	DB	00H, 'P', 01H, 00H, 00H, '`', 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000120000001100000010000000090
CONST	SEGMENT
__xmm@00000120000001100000010000000090 DB 090H, 00H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 010H, 01H, 00H, 00H, ' ', 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000080000000700000006000000050
CONST	SEGMENT
__xmm@00000080000000700000006000000050 DB 'P', 00H, 00H, 00H, '`', 00H, 00H
	DB	00H, 'p', 00H, 00H, 00H, 080H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000040000000300000002000000010
CONST	SEGMENT
__xmm@00000040000000300000002000000010 DB 010H, 00H, 00H, 00H, ' ', 00H, 00H
	DB	00H, '0', 00H, 00H, 00H, '@', 00H, 00H, 00H
CONST	ENDS
xdata	SEGMENT
$unwind$?f@@YAXPEAH00000_K@Z DD 010401H
	DD	0204H
$chain$1$?f@@YAXPEAH00000_K@Z DD 041421H
	DD	07414H
	DD	023405H
	DD	imagerel $LN11
	DD	imagerel $LN11+17
	DD	imagerel $unwind$?f@@YAXPEAH00000_K@Z
$chain$2$?f@@YAXPEAH00000_K@Z DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+17
	DD	imagerel $unwind$?f@@YAXPEAH00000_K@Z
$unwind$?f_restrict@@YAXPEIAH00000_K@Z DD 030601H
	DD	043406H
	DD	07006H
$chain$1$?f_restrict@@YAXPEIAH00000_K@Z DD 041521H
	DD	03e415H
	DD	026405H
	DD	imagerel $LN11
	DD	imagerel $LN11+25
	DD	imagerel $unwind$?f_restrict@@YAXPEIAH00000_K@Z
$chain$2$?f_restrict@@YAXPEIAH00000_K@Z DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+25
	DD	imagerel $unwind$?f_restrict@@YAXPEIAH00000_K@Z
$unwind$main DD	072b19H
	DD	049741aH
	DD	048341aH
	DD	046011aH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
y$ = 64
x$ = 144
sum_product$ = 224
update$ = 304
product$ = 384
sum$ = 464
__$ArrayPad$ = 544
main	PROC
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 31
$LN37:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	push	rbp
	lea	rbp, QWORD PTR [rsp-304]
	sub	rsp, 560				; 00000230H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
; Line 32
	movdqa	xmm0, XMMWORD PTR __xmm@00000040000000300000002000000010
; Line 9
	xor	ebx, ebx
; Line 32
	movdqa	xmm1, XMMWORD PTR __xmm@00000080000000700000006000000050
; Line 9
	mov	r8d, ebx
; Line 32
	movdqa	XMMWORD PTR x$[rbp-256], xmm0
	movdqa	xmm0, XMMWORD PTR __xmm@00000120000001100000010000000090
	movdqa	XMMWORD PTR x$[rbp-240], xmm1
	movdqa	xmm1, XMMWORD PTR __xmm@00000160000001500000014000000130
	movdqa	XMMWORD PTR x$[rbp-224], xmm0
; Line 33
	movdqa	xmm0, XMMWORD PTR __xmm@00000040000000300000002000000010
	movdqa	XMMWORD PTR x$[rbp-208], xmm1
	movdqa	xmm1, XMMWORD PTR __xmm@00000080000000700000006000000050
	movdqa	XMMWORD PTR y$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR __xmm@00000120000001100000010000000090
	movdqa	XMMWORD PTR y$[rsp+16], xmm1
	movdqa	xmm1, XMMWORD PTR __xmm@00000160000001500000014000000130
	movdqa	XMMWORD PTR y$[rsp+32], xmm0
	movdqa	XMMWORD PTR y$[rsp+48], xmm1
	mov	DWORD PTR x$[rbp-192], 368		; 00000170H
	mov	DWORD PTR x$[rbp-188], 384		; 00000180H
	mov	DWORD PTR y$[rbp-192], 368		; 00000170H
	mov	DWORD PTR y$[rbp-188], 384		; 00000180H
	npad	8
$LL12@main:
; Line 11
	mov	eax, DWORD PTR x$[rbp+r8*4-256]
	mov	edx, DWORD PTR y$[rsp+r8*4]
	// ECX=x+y
	lea	ecx, DWORD PTR [rdx+rax]
; Line 12
	// EDX=x*y
	imul	edx, eax
; Line 13
	// EAX = i*123
	imul	eax, r8d, 123				; 0000007bH
	mov	DWORD PTR sum$[rbp+r8*4-256], ecx
	mov	DWORD PTR product$[rbp+r8*4-256], edx
	mov	DWORD PTR update$[rbp+r8*4-256], eax
; Line 14
	//EAX = product + sum
	lea	eax, DWORD PTR [rdx+rcx]
	mov	DWORD PTR sum_product$[rbp+r8*4-256], eax
	inc	r8
	cmp	r8, 18
	jb	SHORT $LL12@main
; Line 40
	mov	rdi, rbx
	npad	3
$LL4@main:
; Line 42
	mov	eax, DWORD PTR sum_product$[rbp+rdi-256]
	lea	rcx, OFFSET FLAT:$SG33167
	mov	r9d, DWORD PTR sum$[rbp+rdi-256]
	mov	r8d, DWORD PTR y$[rsp+rdi]
	mov	edx, DWORD PTR x$[rbp+rdi-256]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR update$[rbp+rdi-256]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR product$[rbp+rdi-256]
	mov	DWORD PTR [rsp+32], eax
	call	printf
	add	rdi, 4
	cmp	rdi, 72					; 00000048H
	jb	SHORT $LL4@main
; Line 20
	mov	r8, rbx
	npad	11
$LL17@main:
; Line 22
	mov	eax, DWORD PTR x$[rbp+r8*4-256]
	mov	edx, DWORD PTR y$[rsp+r8*4]
	lea	ecx, DWORD PTR [rdx+rax]
; Line 23
	imul	edx, eax
; Line 24
	imul	eax, r8d, 123				; 0000007bH
	mov	DWORD PTR sum$[rbp+r8*4-256], ecx
	mov	DWORD PTR product$[rbp+r8*4-256], edx
	mov	DWORD PTR update$[rbp+r8*4-256], eax
; Line 25
	lea	eax, DWORD PTR [rdx+rcx]
	mov	DWORD PTR sum_product$[rbp+r8*4-256], eax
	inc	r8
	cmp	r8, 18
	jb	SHORT $LL17@main
	npad	6
$LL7@main:
; Line 48
	mov	eax, DWORD PTR sum_product$[rbp+rbx-256]
	lea	rcx, OFFSET FLAT:$SG33168
	mov	r9d, DWORD PTR sum$[rbp+rbx-256]
	mov	r8d, DWORD PTR y$[rsp+rbx]
	mov	edx, DWORD PTR x$[rbp+rbx-256]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR update$[rbp+rbx-256]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR product$[rbp+rbx-256]
	mov	DWORD PTR [rsp+32], eax
	call	printf
	add	rbx, 4
	cmp	rbx, 72					; 00000048H
	jb	SHORT $LL7@main
; Line 50
	xor	eax, eax
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+560]
	mov	rbx, QWORD PTR [r11+16]
	mov	rdi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
x$ = 16
y$ = 24
sum$ = 32
product$ = 40
update$ = 48
sum_product$ = 56
size$ = 64
?f_restrict@@YAXPEIAH00000_K@Z PROC			; f_restrict
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 19
$LN11:
	mov	QWORD PTR [rsp+24], rbx
	push	rdi
; Line 20
	mov	r11, QWORD PTR size$[rsp]
	xor	r10d, r10d
	mov	rbx, r8
	mov	rdi, rcx
	test	r11, r11
	je	SHORT $LN3@f_restrict
	mov	QWORD PTR [rsp+16], rsi
	sub	rdi, rdx
	mov	rsi, QWORD PTR update$[rsp]
	sub	rbx, rdx
	mov	QWORD PTR [rsp+24], r14
	sub	rsi, rdx
	mov	r14, QWORD PTR sum_product$[rsp]
	sub	r9, rdx
	sub	r14, rdx
	npad	4
$LL4@f_restrict:
; Line 22
	mov	eax, DWORD PTR [rdx]
	mov	r8d, DWORD PTR [rdi+rdx]
	lea	rdx, QWORD PTR [rdx+4]
	lea	ecx, DWORD PTR [r8+rax]
; Line 23
	imul	r8d, eax
; Line 24
	imul	eax, r10d, 123				; 0000007bH
	inc	r10
	//sum
	mov	DWORD PTR [rbx+rdx-4], ecx
	//product
	mov	DWORD PTR [r9+rdx-4], r8d
	//update
	mov	DWORD PTR [rsi+rdx-4], eax
; Line 25
	//produc + sum
	lea	eax, DWORD PTR [r8+rcx]
	mov	DWORD PTR [r14+rdx-4], eax
	cmp	r10, r11
	jb	SHORT $LL4@f_restrict
; Line 20
	mov	r14, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+16]
$LN3@f_restrict:
; Line 27
	mov	rbx, QWORD PTR [rsp+32]
	pop	rdi
	ret	0
?f_restrict@@YAXPEIAH00000_K@Z ENDP			; f_restrict
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
x$ = 16
y$ = 24
sum$ = 32
product$ = 40
update$ = 48
sum_product$ = 56
size$ = 64
?f@@YAXPEAH00000_K@Z PROC				; f
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 8
$LN11:
	sub	rsp, 8
; Line 9
	// R11 = size
	mov	r11, QWORD PTR size$[rsp]
	xor	r10d, r10d
	test	r11, r11
	je	SHORT $LN3@f
	mov	QWORD PTR [rsp+16], rbx
	// RCX =x
	// RDX =y
	sub	rcx, rdx
	// RBX =update
	mov	rbx, QWORD PTR update$[rsp]
	// R8 = sum
	sub	r8, rdx
	mov	QWORD PTR [rsp], rdi
	sub	rbx, rdx
	// rdi =sum_product
	mov	rdi, QWORD PTR sum_product$[rsp]
	// R9 = product
	sub	r9, rdx
	sub	rdi, rdx
	npad	13
$LL4@f:
; Line 11
	//sum=x+y
	mov	eax, DWORD PTR [rcx+rdx]
	add	eax, DWORD PTR [rdx]
	mov	DWORD PTR [r8+rdx], eax
; Line 12
	//product =x*y
	mov	eax, DWORD PTR [rcx+rdx]
	imul	eax, DWORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+4]
	mov	DWORD PTR [r9+rdx-4], eax
; Line 13
	//update=i*123
	imul	eax, r10d, 123				; 0000007bH
	inc	r10
	mov	DWORD PTR [rbx+rdx-4], eax
; Line 14
	// reload product
	mov	eax, DWORD PTR [r9+rdx-4]  
	// relaod sum
	add	eax, DWORD PTR [r8+rdx-4]
	//sum_product = product + sum
	mov	DWORD PTR [rdi+rdx-4], eax
	cmp	r10, r11
	jb	SHORT $LL4@f
; Line 9
	mov	rdi, QWORD PTR [rsp]
	mov	rbx, QWORD PTR [rsp+16]
$LN3@f:
; Line 16
	add	rsp, 8
	ret	0
?f@@YAXPEAH00000_K@Z ENDP				; f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
