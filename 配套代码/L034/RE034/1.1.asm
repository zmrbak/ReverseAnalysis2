; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30037.0 

	TITLE	C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG34053 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
$SG34054 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?f@@YAXPAH00000I@Z				; f
PUBLIC	?f_restrict@@YAXPIAH00000I@Z			; f_restrict
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	___isa_available_default
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000040000000300000002000000010
PUBLIC	__xmm@0000007b0000007b0000007b0000007b
PUBLIC	__xmm@00000080000000700000006000000050
PUBLIC	__xmm@00000120000001100000010000000090
PUBLIC	__xmm@00000160000001500000014000000130
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___isa_available:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ___isa_available_default
_BSS	SEGMENT
___isa_available_default DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@00000160000001500000014000000130
CONST	SEGMENT
__xmm@00000160000001500000014000000130 DB '0', 01H, 00H, 00H, '@', 01H, 00H
	DB	00H, 'P', 01H, 00H, 00H, '`', 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000120000001100000010000000090
CONST	SEGMENT
__xmm@00000120000001100000010000000090 DB 090H, 00H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 010H, 01H, 00H, 00H, ' ', 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000080000000700000006000000050
CONST	SEGMENT
__xmm@00000080000000700000006000000050 DB 'P', 00H, 00H, 00H, '`', 00H, 00H
	DB	00H, 'p', 00H, 00H, 00H, 080H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000007b0000007b0000007b0000007b
CONST	SEGMENT
__xmm@0000007b0000007b0000007b0000007b DB '{', 00H, 00H, 00H, '{', 00H, 00H
	DB	00H, '{', 00H, 00H, 00H, '{', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000040000000300000002000000010
CONST	SEGMENT
__xmm@00000040000000300000002000000010 DB 010H, 00H, 00H, 00H, ' ', 00H, 00H
	DB	00H, '0', 00H, 00H, 00H, '@', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_y$ = -436						; size = 72
_x$ = -364						; size = 72
_sum_product$ = -292					; size = 72
_update$ = -220						; size = 72
_product$ = -148					; size = 72
_sum$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_main	PROC
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 31
	sub	esp, 436				; 000001b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+436], eax
; Line 32
	movaps	xmm0, XMMWORD PTR __xmm@00000040000000300000002000000010
; Line 39
	lea	eax, DWORD PTR _sum_product$[esp+436]
	movups	XMMWORD PTR _x$[esp+436], xmm0
	push	esi
	movaps	xmm0, XMMWORD PTR __xmm@00000080000000700000006000000050
	movups	XMMWORD PTR _x$[esp+456], xmm0
	push	18					; 00000012H
	movaps	xmm0, XMMWORD PTR __xmm@00000120000001100000010000000090
	push	eax
	movups	XMMWORD PTR _x$[esp+480], xmm0
	lea	eax, DWORD PTR _update$[esp+448]
	mov	DWORD PTR _x$[esp+512], 368		; 00000170H
	movaps	xmm0, XMMWORD PTR __xmm@00000160000001500000014000000130
	push	eax
	movups	XMMWORD PTR _x$[esp+500], xmm0
	lea	eax, DWORD PTR _product$[esp+452]
	mov	DWORD PTR _x$[esp+520], 384		; 00000180H
	movaps	xmm0, XMMWORD PTR __xmm@00000040000000300000002000000010
	push	eax
	movups	XMMWORD PTR _y$[esp+456], xmm0
	lea	eax, DWORD PTR _sum$[esp+456]
	mov	DWORD PTR _y$[esp+520], 368		; 00000170H
	movaps	xmm0, XMMWORD PTR __xmm@00000080000000700000006000000050
	push	eax
	movups	XMMWORD PTR _y$[esp+476], xmm0
	lea	eax, DWORD PTR _y$[esp+460]
	mov	DWORD PTR _y$[esp+528], 384		; 00000180H
	movaps	xmm0, XMMWORD PTR __xmm@00000120000001100000010000000090
	push	eax
	movups	XMMWORD PTR _y$[esp+496], xmm0
	lea	eax, DWORD PTR _x$[esp+464]
	movaps	xmm0, XMMWORD PTR __xmm@00000160000001500000014000000130
	push	eax
	movups	XMMWORD PTR _y$[esp+516], xmm0
	call	?f@@YAXPAH00000I@Z			; f
	add	esp, 28					; 0000001cH
	xor	esi, esi
	npad	12
$LL4@main:
; Line 42
	push	DWORD PTR _sum_product$[esp+esi+440]
	push	DWORD PTR _update$[esp+esi+444]
	push	DWORD PTR _product$[esp+esi+448]
	push	DWORD PTR _sum$[esp+esi+452]
	push	DWORD PTR _y$[esp+esi+456]
	push	DWORD PTR _x$[esp+esi+460]
	push	OFFSET $SG34053
	call	_printf
	add	esi, 4
	add	esp, 28					; 0000001cH
	cmp	esi, 72					; 00000048H
	jb	SHORT $LL4@main
; Line 45
	push	18					; 00000012H
	lea	eax, DWORD PTR _sum_product$[esp+444]
	push	eax
	lea	eax, DWORD PTR _update$[esp+448]
	push	eax
	lea	eax, DWORD PTR _product$[esp+452]
	push	eax
	lea	eax, DWORD PTR _sum$[esp+456]
	push	eax
	lea	eax, DWORD PTR _y$[esp+460]
	push	eax
	lea	eax, DWORD PTR _x$[esp+464]
	push	eax
	call	?f_restrict@@YAXPIAH00000I@Z		; f_restrict
	add	esp, 28					; 0000001cH
	xor	esi, esi
	npad	1
$LL7@main:
; Line 48
	push	DWORD PTR _sum_product$[esp+esi+440]
	push	DWORD PTR _update$[esp+esi+444]
	push	DWORD PTR _product$[esp+esi+448]
	push	DWORD PTR _sum$[esp+esi+452]
	push	DWORD PTR _y$[esp+esi+456]
	push	DWORD PTR _x$[esp+esi+460]
	push	OFFSET $SG34054
	call	_printf
	add	esi, 4
	add	esp, 28					; 0000001cH
	cmp	esi, 72					; 00000048H
	jb	SHORT $LL7@main
; Line 50
	mov	ecx, DWORD PTR __$ArrayPad$[esp+440]
	xor	eax, eax
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 436				; 000001b4H
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
tv683 = -20						; size = 4
tv680 = -16						; size = 4
tv678 = -12						; size = 4
tv676 = -8						; size = 4
tv674 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sum$ = 16						; size = 4
_product$ = 20						; size = 4
_update$ = 24						; size = 4
_sum_product$ = 28					; size = 4
_size$ = 32						; size = 4
?f_restrict@@YAXPIAH00000I@Z PROC			; f_restrict
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 19
	sub	esp, 20					; 00000014H
; Line 20
	xor	edx, edx
	push	edi
	mov	edi, DWORD PTR _size$[esp+20]
	test	edi, edi
	je	$LN3@f_restrict
	mov	ecx, DWORD PTR _y$[esp+20]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _sum_product$[esp+28]
	push	esi
	cmp	edi, 4
	jb	$LN16@f_restrict
	cmp	DWORD PTR ___isa_available, 2
	jl	$LN16@f_restrict
	mov	esi, DWORD PTR _x$[esp+32]
	mov	ebx, edi
	movaps	xmm3, XMMWORD PTR __xmm@00000003000000020000000100000000
	sub	esi, ecx
	movaps	xmm4, XMMWORD PTR __xmm@0000007b0000007b0000007b0000007b
	and	ebx, -4					; fffffffcH
	mov	DWORD PTR tv683[esp+36], esi
	mov	eax, ecx
	mov	esi, DWORD PTR _sum$[esp+32]
	sub	esi, ecx
	mov	DWORD PTR tv680[esp+36], esi
	mov	esi, DWORD PTR _product$[esp+32]
	mov	edi, DWORD PTR tv680[esp+36]
	sub	esi, ecx
	mov	DWORD PTR tv678[esp+36], esi
	mov	esi, DWORD PTR _update$[esp+32]
	sub	esi, ecx
	sub	ebp, ecx
	mov	ecx, DWORD PTR tv678[esp+36]
	mov	DWORD PTR tv676[esp+36], esi
	mov	esi, DWORD PTR tv683[esp+36]
	mov	DWORD PTR tv674[esp+36], ebp
	mov	ebp, DWORD PTR tv676[esp+36]
	npad	10
$LL4@f_restrict:
; Line 22
	movups	xmm2, XMMWORD PTR [esi+eax]
; Line 25
	mov	esi, DWORD PTR tv674[esp+36]
	lea	eax, DWORD PTR [eax+16]
	movups	xmm0, XMMWORD PTR [eax-16]
	movaps	xmm1, xmm2
	paddd	xmm1, xmm0
	pmulld	xmm2, xmm0
	movd	xmm0, edx
	add	edx, 4
	pshufd	xmm0, xmm0, 0
	paddd	xmm0, xmm3
	movups	XMMWORD PTR [ecx+eax-16], xmm2
	paddd	xmm2, xmm1
	pmulld	xmm0, xmm4
	movups	XMMWORD PTR [esi+eax-16], xmm2
	mov	esi, DWORD PTR tv683[esp+36]
	movups	XMMWORD PTR [edi+eax-16], xmm1
	movups	XMMWORD PTR [eax+ebp-16], xmm0
	cmp	edx, ebx
	jb	SHORT $LL4@f_restrict
; Line 20
	mov	edi, DWORD PTR _size$[esp+32]
	mov	ecx, DWORD PTR _y$[esp+32]
	mov	esi, DWORD PTR _update$[esp+32]
	cmp	edx, edi
	jae	SHORT $LN17@f_restrict
	jmp	SHORT $LN14@f_restrict
$LN16@f_restrict:
	mov	esi, DWORD PTR _update$[esp+32]
$LN14@f_restrict:
	mov	ebp, DWORD PTR _sum_product$[esp+32]
	lea	eax, DWORD PTR [ecx+edx*4]
	sub	DWORD PTR _x$[esp+32], ecx
	sub	esi, ecx
	sub	DWORD PTR _sum$[esp+32], ecx
	sub	ebp, ecx
	sub	DWORD PTR _product$[esp+32], ecx
	imul	ebx, edx, 123
	sub	edi, edx
	mov	DWORD PTR _update$[esp+32], esi
$LL8@f_restrict:
; Line 22
	mov	ecx, DWORD PTR _x$[esp+32]
	lea	eax, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax-4]
	mov	esi, DWORD PTR [eax+ecx-4]
	add	edx, esi
	mov	ecx, DWORD PTR _sum$[esp+32]
; Line 23
	imul	esi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+ecx-4], edx
	mov	ecx, DWORD PTR _product$[esp+32]
	mov	DWORD PTR [eax+ecx-4], esi
; Line 24
	mov	ecx, DWORD PTR _update$[esp+32]
	mov	DWORD PTR [eax+ecx-4], ebx
; Line 25
	lea	ecx, DWORD PTR [esi+edx]
	add	ebx, 123				; 0000007bH
	mov	DWORD PTR [eax+ebp-4], ecx
	sub	edi, 1
	jne	SHORT $LL8@f_restrict
$LN17@f_restrict:
	pop	esi
	pop	ebp
	pop	ebx
$LN3@f_restrict:
	pop	edi
; Line 27
	add	esp, 20					; 00000014H
	ret	0
?f_restrict@@YAXPIAH00000I@Z ENDP			; f_restrict
_TEXT	ENDS
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
tv1104 = -28						; size = 4
tv1082 = -28						; size = 4
tv1106 = -24						; size = 4
tv1084 = -24						; size = 4
tv1108 = -20						; size = 4
tv1085 = -20						; size = 4
tv1110 = -16						; size = 4
_i$1$ = -16						; size = 4
tv1113 = -12						; size = 4
tv1086 = -12						; size = 4
tv1116 = -8						; size = 4
tv1087 = -8						; size = 4
tv1115 = -4						; size = 4
tv1083 = -4						; size = 4
tv1081 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sum$ = 16						; size = 4
_product$ = 20						; size = 4
_update$ = 24						; size = 4
_sum_product$ = 28					; size = 4
_size$ = 32						; size = 4
?f@@YAXPAH00000I@Z PROC					; f
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 8
	sub	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _y$[esp+24]
	push	ebx
	mov	ebx, DWORD PTR _sum_product$[esp+28]
	push	ebp
	mov	ebp, DWORD PTR _sum$[esp+32]
	push	esi
; Line 9
	mov	esi, DWORD PTR _size$[esp+36]
	mov	DWORD PTR _i$1$[esp+40], 0
	push	edi
	mov	edi, DWORD PTR _update$[esp+40]
	test	esi, esi
	je	$LN3@f
	cmp	esi, 4
	jb	$LN28@f
	cmp	DWORD PTR ___isa_available, 2
	jl	$LN28@f
	mov	edx, DWORD PTR _product$[esp+40]
	lea	ecx, DWORD PTR [esi*4-4]
	movaps	xmm4, XMMWORD PTR __xmm@00000003000000020000000100000000
	lea	eax, DWORD PTR [esi-1]
	add	ecx, ebp
	mov	DWORD PTR _i$1$[esp+44], 0
	mov	DWORD PTR tv1082[esp+44], ecx
	cmp	edx, ecx
	mov	ecx, DWORD PTR _y$[esp+40]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1083[esp+44], eax
	ja	SHORT $LN10@f
	cmp	eax, ebp
	jae	$LN28@f
$LN10@f:
	lea	edi, DWORD PTR [esi-1]
	lea	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR tv1084[esp+44], edi
	cmp	edx, edi
	mov	edi, DWORD PTR _update$[esp+40]
	ja	SHORT $LN11@f
	cmp	eax, ebx
	jae	$LN28@f
$LN11@f:
	lea	ecx, DWORD PTR [esi-1]
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR tv1085[esp+44], ecx
	cmp	edx, ecx
	mov	ecx, DWORD PTR _y$[esp+40]
	ja	SHORT $LN12@f
	cmp	eax, edi
	jae	$LN28@f
$LN12@f:
	lea	ebx, DWORD PTR [esi-1]
	lea	ebx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR tv1086[esp+44], ebx
	cmp	edx, ebx
	mov	ebx, DWORD PTR _sum_product$[esp+40]
	ja	SHORT $LN13@f
	cmp	eax, ecx
	jae	$LN28@f
$LN13@f:
	mov	eax, DWORD PTR _x$[esp+40]
	lea	ebp, DWORD PTR [esi-1]
	lea	ebp, DWORD PTR [eax+ebp*4]
	mov	DWORD PTR tv1087[esp+44], ebp
	cmp	edx, ebp
	mov	ebp, DWORD PTR _sum$[esp+40]
	ja	SHORT $LN14@f
	cmp	DWORD PTR tv1083[esp+44], eax
	jae	$LN28@f
$LN14@f:
	cmp	ebp, DWORD PTR tv1084[esp+44]
	ja	SHORT $LN15@f
	cmp	DWORD PTR tv1082[esp+44], ebx
	jae	$LN28@f
$LN15@f:
	cmp	ebp, DWORD PTR tv1085[esp+44]
	ja	SHORT $LN16@f
	cmp	DWORD PTR tv1082[esp+44], edi
	jae	$LN28@f
$LN16@f:
	cmp	ebp, DWORD PTR tv1086[esp+44]
	ja	SHORT $LN17@f
	cmp	DWORD PTR tv1082[esp+44], ecx
	jae	$LN28@f
$LN17@f:
	cmp	ebp, DWORD PTR tv1087[esp+44]
	ja	SHORT $LN18@f
	cmp	DWORD PTR tv1082[esp+44], eax
	jae	$LN28@f
$LN18@f:
	cmp	ebx, DWORD PTR tv1085[esp+44]
	ja	SHORT $LN19@f
	cmp	DWORD PTR tv1084[esp+44], edi
	jae	$LN28@f
$LN19@f:
	cmp	ebx, DWORD PTR tv1086[esp+44]
	ja	SHORT $LN20@f
	cmp	DWORD PTR tv1084[esp+44], ecx
	jae	$LN28@f
$LN20@f:
	cmp	ebx, DWORD PTR tv1087[esp+44]
	ja	SHORT $LN21@f
	cmp	DWORD PTR tv1084[esp+44], eax
	jae	$LN28@f
$LN21@f:
	cmp	edi, DWORD PTR tv1086[esp+44]
	ja	SHORT $LN22@f
	cmp	DWORD PTR tv1085[esp+44], ecx
	jae	$LN28@f
$LN22@f:
	cmp	edi, DWORD PTR tv1087[esp+44]
	ja	SHORT $LN23@f
	cmp	DWORD PTR tv1085[esp+44], eax
	jae	$LN28@f
$LN23@f:
	sub	eax, ecx
	movaps	xmm3, XMMWORD PTR __xmm@0000007b0000007b0000007b0000007b
	mov	DWORD PTR tv1113[esp+44], eax
	mov	eax, ebp
	mov	ebp, DWORD PTR tv1113[esp+44]
	sub	eax, ecx
	mov	DWORD PTR tv1110[esp+44], eax
	mov	eax, edx
	sub	eax, ecx
	mov	DWORD PTR tv1116[esp+44], esi
	and	DWORD PTR tv1116[esp+44], -4		; fffffffcH
	mov	DWORD PTR tv1108[esp+44], eax
	mov	eax, edi
	mov	edi, DWORD PTR tv1110[esp+44]
	sub	eax, ecx
	mov	esi, DWORD PTR tv1108[esp+44]
	mov	DWORD PTR tv1106[esp+44], eax
	mov	eax, ebx
	sub	eax, ecx
	xor	edx, edx
	mov	DWORD PTR tv1104[esp+44], eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv1106[esp+44]
	mov	ebx, DWORD PTR tv1104[esp+44]
	npad	9
$LL4@f:
; Line 11
	movups	xmm2, XMMWORD PTR [eax+ebp]
	lea	eax, DWORD PTR [eax+16]
	movups	xmm0, XMMWORD PTR [eax-16]
	movaps	xmm1, xmm2
	paddd	xmm1, xmm0
; Line 12
	pmulld	xmm2, xmm0
; Line 13
	movd	xmm0, edx
	add	edx, 4
	pshufd	xmm0, xmm0, 0
	paddd	xmm0, xmm4
	movups	XMMWORD PTR [esi+eax-16], xmm2
; Line 14
	paddd	xmm2, xmm1
	pmulld	xmm0, xmm3
	movups	XMMWORD PTR [edi+eax-16], xmm1
	movups	XMMWORD PTR [ecx+eax-16], xmm0
	movups	XMMWORD PTR [ebx+eax-16], xmm2
	cmp	edx, DWORD PTR tv1116[esp+44]
	jb	SHORT $LL4@f
; Line 9
	mov	esi, DWORD PTR _size$[esp+40]
	mov	eax, edx
	mov	ecx, DWORD PTR _y$[esp+40]
	mov	edi, DWORD PTR _update$[esp+40]
	mov	ebp, DWORD PTR _sum$[esp+40]
	mov	DWORD PTR tv1081[esp+44], edx
	mov	DWORD PTR _i$1$[esp+44], eax
	cmp	eax, esi
	jae	SHORT $LN3@f
$LN28@f:
	mov	ebx, DWORD PTR _i$1$[esp+44]
	sub	edi, ecx
	sub	DWORD PTR _x$[esp+40], ecx
	sub	ebp, ecx
	sub	DWORD PTR _product$[esp+40], ecx
	imul	edx, ebx, 123
	lea	eax, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR _update$[esp+40], edi
	mov	ebx, DWORD PTR _sum_product$[esp+40]
	sub	ebx, ecx
	sub	esi, DWORD PTR _i$1$[esp+44]
	npad	4
$LL8@f:
; Line 11
	mov	ecx, DWORD PTR _x$[esp+40]
	lea	eax, DWORD PTR [eax+4]
; Line 12
	mov	edi, DWORD PTR _product$[esp+40]
	mov	ecx, DWORD PTR [eax+ecx-4]
	add	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+ebp-4], ecx
	mov	ecx, DWORD PTR _x$[esp+40]
	mov	ecx, DWORD PTR [eax+ecx-4]
	imul	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+edi-4], ecx
; Line 13
	mov	edi, DWORD PTR _update$[esp+40]
; Line 14
	mov	ecx, DWORD PTR _product$[esp+40]
	mov	DWORD PTR [eax+edi-4], edx
	add	edx, 123				; 0000007bH
	mov	ecx, DWORD PTR [eax+ecx-4]
	add	ecx, DWORD PTR [eax+ebp-4]
	mov	DWORD PTR [eax+ebx-4], ecx
	sub	esi, 1
	jne	SHORT $LL8@f
$LN3@f:
	pop	edi
; Line 16
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	0
?f@@YAXPAH00000I@Z ENDP					; f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	esi
; Line 960
	mov	esi, DWORD PTR __Format$[esp]
	push	1
	call	___acrt_iob_func
	add	esp, 4
; Line 645
	lea	ecx, DWORD PTR __Format$[esp+4]
	push	ecx
	push	0
	push	esi
	push	eax
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 962
	pop	esi
; Line 963
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 645
	push	DWORD PTR __ArgList$[esp-4]
	push	DWORD PTR __Locale$[esp]
	push	DWORD PTR __Format$[esp+4]
	push	DWORD PTR __Stream$[esp+8]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
