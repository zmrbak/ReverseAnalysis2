; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30037.0 

	TITLE	C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG34053 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
$SG34054 DB	'%d,%d,%d,%d,%d,%d', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?f@@YAXPAH00000I@Z				; f
PUBLIC	?f_restrict@@YAXPIAH00000I@Z			; f_restrict
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -444						; size = 4
_i$2 = -440						; size = 4
_sum$ = -436						; size = 72
_product$ = -364					; size = 72
_update$ = -292						; size = 72
_sum_product$ = -220					; size = 72
_x$ = -148						; size = 72
_y$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_main	PROC
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 444				; 000001bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 32
	mov	DWORD PTR _x$[ebp], 16			; 00000010H
	mov	DWORD PTR _x$[ebp+4], 32		; 00000020H
	mov	DWORD PTR _x$[ebp+8], 48		; 00000030H
	mov	DWORD PTR _x$[ebp+12], 64		; 00000040H
	mov	DWORD PTR _x$[ebp+16], 80		; 00000050H
	mov	DWORD PTR _x$[ebp+20], 96		; 00000060H
	mov	DWORD PTR _x$[ebp+24], 112		; 00000070H
	mov	DWORD PTR _x$[ebp+28], 128		; 00000080H
	mov	DWORD PTR _x$[ebp+32], 144		; 00000090H
	mov	DWORD PTR _x$[ebp+36], 256		; 00000100H
	mov	DWORD PTR _x$[ebp+40], 272		; 00000110H
	mov	DWORD PTR _x$[ebp+44], 288		; 00000120H
	mov	DWORD PTR _x$[ebp+48], 304		; 00000130H
	mov	DWORD PTR _x$[ebp+52], 320		; 00000140H
	mov	DWORD PTR _x$[ebp+56], 336		; 00000150H
	mov	DWORD PTR _x$[ebp+60], 352		; 00000160H
	mov	DWORD PTR _x$[ebp+64], 368		; 00000170H
	mov	DWORD PTR _x$[ebp+68], 384		; 00000180H
; Line 33
	mov	DWORD PTR _y$[ebp], 16			; 00000010H
	mov	DWORD PTR _y$[ebp+4], 32		; 00000020H
	mov	DWORD PTR _y$[ebp+8], 48		; 00000030H
	mov	DWORD PTR _y$[ebp+12], 64		; 00000040H
	mov	DWORD PTR _y$[ebp+16], 80		; 00000050H
	mov	DWORD PTR _y$[ebp+20], 96		; 00000060H
	mov	DWORD PTR _y$[ebp+24], 112		; 00000070H
	mov	DWORD PTR _y$[ebp+28], 128		; 00000080H
	mov	DWORD PTR _y$[ebp+32], 144		; 00000090H
	mov	DWORD PTR _y$[ebp+36], 256		; 00000100H
	mov	DWORD PTR _y$[ebp+40], 272		; 00000110H
	mov	DWORD PTR _y$[ebp+44], 288		; 00000120H
	mov	DWORD PTR _y$[ebp+48], 304		; 00000130H
	mov	DWORD PTR _y$[ebp+52], 320		; 00000140H
	mov	DWORD PTR _y$[ebp+56], 336		; 00000150H
	mov	DWORD PTR _y$[ebp+60], 352		; 00000160H
	mov	DWORD PTR _y$[ebp+64], 368		; 00000170H
	mov	DWORD PTR _y$[ebp+68], 384		; 00000180H
; Line 39
	push	18					; 00000012H
	lea	eax, DWORD PTR _sum_product$[ebp]
	push	eax
	lea	ecx, DWORD PTR _update$[ebp]
	push	ecx
	lea	edx, DWORD PTR _product$[ebp]
	push	edx
	lea	eax, DWORD PTR _sum$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	call	?f@@YAXPAH00000I@Z			; f
	add	esp, 28					; 0000001cH
; Line 40
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$2[ebp], 18			; 00000012H
	jae	SHORT $LN3@main
; Line 42
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _sum_product$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _update$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _product$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _sum$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _y$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _x$[ebp+edx*4]
	push	eax
	push	OFFSET $SG34053
	call	_printf
	add	esp, 28					; 0000001cH
; Line 43
	jmp	SHORT $LN2@main
$LN3@main:
; Line 45
	push	18					; 00000012H
	lea	ecx, DWORD PTR _sum_product$[ebp]
	push	ecx
	lea	edx, DWORD PTR _update$[ebp]
	push	edx
	lea	eax, DWORD PTR _product$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?f_restrict@@YAXPIAH00000I@Z		; f_restrict
	add	esp, 28					; 0000001cH
; Line 46
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN7@main:
	cmp	DWORD PTR _i$1[ebp], 18			; 00000012H
	jae	SHORT $LN1@main
; Line 48
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _sum_product$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _update$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _product$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _sum$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _y$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _x$[ebp+eax*4]
	push	ecx
	push	OFFSET $SG34054
	call	_printf
	add	esp, 28					; 0000001cH
; Line 49
	jmp	SHORT $LN5@main
$LN1@main:
; Line 50
	xor	eax, eax
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sum$ = 16						; size = 4
_product$ = 20						; size = 4
_update$ = 24						; size = 4
_sum_product$ = 28					; size = 4
_size$ = 32						; size = 4
?f_restrict@@YAXPIAH00000I@Z PROC			; f_restrict
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 20
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@f_restrict
$LN2@f_restrict:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@f_restrict:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@f_restrict
; Line 22
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 23
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	imul	ecx, DWORD PTR [esi+eax*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _product$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 24
	imul	ecx, DWORD PTR _i$1[ebp], 123
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _update$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 25
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _product$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _sum_product$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 26
	jmp	SHORT $LN2@f_restrict
$LN1@f_restrict:
; Line 27
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?f_restrict@@YAXPIAH00000I@Z ENDP			; f_restrict
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sum$ = 16						; size = 4
_product$ = 20						; size = 4
_update$ = 24						; size = 4
_sum_product$ = 28					; size = 4
_size$ = 32						; size = 4
?f@@YAXPAH00000I@Z PROC					; f
; File C:\Users\Zmrbak\source\repos\RE034\RE034\RE034.cpp
; Line 8
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 9
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@f
$LN2@f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@f:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@f
; Line 11
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 12
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	imul	ecx, DWORD PTR [esi+eax*4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _product$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 13
	imul	ecx, DWORD PTR _i$1[ebp], 123
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _update$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 14
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _product$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _sum_product$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 15
	jmp	SHORT $LN2@f
$LN1@f:
; Line 16
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?f@@YAXPAH00000I@Z ENDP					; f
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 959
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 960
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 961
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 962
	mov	eax, DWORD PTR __Result$[ebp]
; Line 963
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
